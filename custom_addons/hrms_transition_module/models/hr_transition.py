import logging
import pytz
import threading
from collections import OrderedDict, defaultdict
from datetime import date, datetime, timedelta
from psycopg2 import sql

from odoo import api, fields, models, tools, SUPERUSER_ID
from odoo.exceptions import UserError, AccessError
from odoo.osv import expression
from odoo.tools.translate import _
from odoo.tools import date_utils, email_split, is_html_empty, groupby
from odoo.tools.misc import get_lang
from random import randint
from odoo.exceptions import ValidationError


class HR_Iswerk_Transition(models.Model):
    _name = 'hr.transition'
    _description = 'Transition'
    _rec_name = 'employee_id'
    
    _inherit = ['hr.employee.masterlist', 'hr.departments','hr.job.positions','mail.thread', 'mail.activity.mixin']

    active = fields.Boolean('Active', store=True, default=True)

    employee_id = fields.Char('Employee ID', store=True, index=True, related="complete_name_id.employee_id")
    # Employee ID VALIDATION ERROR
    @api.constrains('employee_id')
    def _check_duplicate(self):
        for record in self:
            # Check if there are other records with the same employee_id
            if record.employee_id:
                duplicate_records = self.search([('employee_id', '=', record.employee_id), ('id', '!=', record.id)])
                if duplicate_records:
                    raise ValidationError('This user already exists')    
    first_name = fields.Char('First Name', store=True, related="complete_name_id.first_name")
    last_name = fields.Char('Last Name', store=True, related="complete_name_id.last_name")
    middle_name = fields.Char('Middle Name', store=True, related="complete_name_id.middle_name")   
    date_of_birth = fields.Date('Date of Birth', store=True, related="complete_name_id.date_of_birth")
    
    complete_name_id = fields.Many2one('hr.employee.masterlist','Complete Name', store=True, index=True, readonly=False, tracking=True)
    position_id = fields.Many2one('hr.job.positions','Job Position', store=True, related="complete_name_id.position_id", tracking=True)
    start_date = fields.Date('Start Date', store=True, index=True, related="complete_name_id.start_date")
    current_department_id = fields.Many2one('hr.departments','Current Department', store=True, index=True)
    transffered_department_id = fields.Many2one('hr.departments','Transfer to', store=True, index=True, tracking=True)
    work_email = fields.Char('Work Email', store=True, index=True, related="complete_name_id.employee_email_address")
    effective_date_transfer = fields.Date('Effective Date Transfer', tracking=True)
    payroll_credential_status = fields.Selection([('done', 'Done'), ('pending', 'Pending'), ('','')], store=True, tracking=True)
    payroll_enrolled_date = fields.Date('Payroll Enrolled Date')
    payroll_credential_generated_by = fields.Char('Payroll Credential Generated By',tracking=True)
    validated_by_id = fields.Many2one('hr.employee.masterlist', 'Validated By', store=True, tracking=True)
    transfer_status= fields.Selection([('new','New'),('for_approval','For Approval'),('transferred','Transferred'),('cancel','Cancelled')],'Transfer Status', default='new', tracking=True)
  
    is_approver = fields.Boolean(string="Is Approver", compute='_compute_is_approver')
    def _compute_is_approver(self):
        for record in self:
            record.is_approver = self.env.user.has_group('hrms_transition_module.group_hrms_transition_approver')
            
    def action_approve(self):
        if self.env.user.has_group('hrms_transition_module.group_hrms_transition_approver'):
            self.transfer_status = 'transferred'
        else:
            raise UserError('You do not have the permissions to approve this record.')
        
    def button_for_approval(self):
       self.write({
           'transfer_status': "for_approval"
       })
       

    def button_transffered(self):
       self.write({
           'transfer_status': "transferred"
       })

    def button_cancelled(self):
       self.write({
           'transfer_status': "cancel"
       })
       
    def button_reset_status(self):
       self.write({
           'transfer_status': "new"
       })